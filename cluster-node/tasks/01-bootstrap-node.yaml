---
- name: Create /etc/kubernetes folder
  file:
    path: /etc/kubernetes
    state: directory
  
- name: Send over kubeadm config file
  template:
    src: kubeadm-init.yaml
    dest: /etc/kubernetes/kubeadm-init.yaml

- name: Initialize Kubernetes (skip mark-control-plane phase)
  shell: "kubeadm init --skip-phases mark-control-plane --config /etc/kubernetes/kubeadm-init.yaml > /var/log/kubeadm-init-output.log"
  args:
    creates: /etc/kubernetes/admin.conf
  when: skip_phase_mark_control_plane == True

- name: Initialize Kubernetes (mark-control-plane phase)
  shell: "kubeadm init --config /etc/kubernetes/kubeadm-init.yaml > /var/log/kubeadm-init-output.log"
  args:
    creates: /etc/kubernetes/admin.conf
  when: skip_phase_mark_control_plane == False

- name: Read the admin.conf file
  slurp:
    src: /etc/kubernetes/admin.conf
  register: kubernetes_admin_conf

- name: Wait for port to be ready
  wait_for:
    host: 127.0.0.1
    port: 6443
    delay: 30

- name: Setup ease of use
  copy:
    dest: /root/.bashrc
    content: |-
      export KUBECONFIG=/etc/kubernetes/admin.conf
      alias k=kubectl

- name: Upload control plane certs
  command: kubeadm init phase upload-certs --upload-certs
  register: upload_certs

# - name: Generate worker node join command
#   shell: 'kubeadm token create --print-join-command > {{ cluster_filesystem_path }}/.worker-node-join'
# 
# - name: Generate control plane join command
#   shell: 'kubeadm token create --print-join-command --certificate-key {{ upload_certs.stdout_lines[-1] }} > {{ cluster_filesystem_path }}/.control-plane-join'
